from typing import Dict

import numpy as np
import pandas as pd
from sklearn.impute import SimpleImputer


def load_mhrv_xls(path: str, sheet_names: list) -> Dict[str, pd.DataFrame]:
    """
    Loads raw data from excel file containing HRV features generated by mhrv.
    @param path: Path to file.
    @param sheet_names: Names of excel sheets to load.
    @return: A dict from sheet name to pandas dataframe. The summary
    statistics rows will be removed.
    """

    dfs: Dict[str, pd.DataFrame] = pd.read_excel(
        path, header=0, index_col=0,
        sheet_name=list(sheet_names),
    )

    summary_rows = ('Mean', 'Median', 'SE')
    for name, df in dfs.items():
        # Remove the rows which contain summary statistics
        df = df.loc[~df.index.isin(summary_rows), :]

        # Convert dtypes
        df = df.astype(np.float32, copy=False)
        df = df.astype(dict(RR=np.int32, NN=np.int32), copy=False)

        # Impute NaN with mean
        df.fillna(value=df.mean(skipna=True), inplace=True)

        dfs[name] = df

        print(f'Loaded {name}: {len(df)} samples, {len(df.columns)} features')

    return dfs


def create_ci_dataset(df_control: pd.DataFrame, df_treated: pd.DataFrame,
                      psd_type: str = 'AR',
                      ) -> pd.DataFrame:
    """
    Creates the dataset for this project as a single dataframe.
    @param df_control:
    @param df_treated:
    @return:
    """

    # Treat PSD columns: Keep only the requested type, remove the other type
    # and rename the columns.
    psd_suffix = f'_{psd_type.upper()}'

    def consolidate_psd(df: pd.DataFrame):
        # Discover PSD columns
        cols = df.columns
        psd_cols = set(
            map(lambda c: c.split(psd_suffix)[0],
                filter(lambda c: c.endswith(psd_suffix), cols))
        )

        # Discover PDS colums of other types
        other_psd_type_cols = filter(lambda c: any(
            [c.startswith(n) and not c.endswith(psd_suffix) for n in psd_cols]
        ), cols)

        df = df.drop(columns=other_psd_type_cols)
        df = df.rename(
            lambda c: c if not c.endswith(psd_suffix) \
                else c.split(psd_suffix)[0],
            axis='columns'
        )
        return df

    df_control = df_control.assign(T=0)
    df_treated = df_treated.assign(T=1)

    return pd.concat([consolidate_psd(df_control),
                      consolidate_psd(df_treated)])


def create_multiscale_outcomes(df: pd.DataFrame, mse_range=(1, 10)) \
        -> pd.DataFrame:

    range_mse_cols = [f'MSE{i}' for i in range(*mse_range)]

    # Fit a line to each sample's MSE range
    fit = np.polyfit(np.arange(*mse_range),
                     df[range_mse_cols].values.transpose(),
                     deg=1)
    fit = fit.transpose()

    # Save slope and intercept as outcome features
    df = df.assign(y_mse_int=fit[:, 1], y_mse_slope=fit[:, 0])

    # Remove MSE features that the outcomes were calculated from
    df = df.drop(columns=[c for c in df.columns if c.startswith('MSE')])

    return df
